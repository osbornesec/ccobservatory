name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  
jobs:
  # Fast quality gates that run on every push
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Backend linting
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Lint backend (Black)
        run: |
          cd backend
          black --check --diff .

      - name: Lint backend (Flake8)
        run: |
          cd backend
          flake8 .

      - name: Type check backend (MyPy)
        run: |
          cd backend
          mypy .

      # Frontend linting
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint frontend (ESLint)
        run: |
          cd frontend
          npm run lint

      - name: Type check frontend (Svelte)
        run: |
          cd frontend
          npm run check

  # Unit and integration tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint-and-typecheck

    # Test matrix for multiple Python versions
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ccobservatory_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Set up test database
        run: |
          cd supabase
          npm install -g @supabase/cli
          # Use local PostgreSQL for tests
          export SUPABASE_DB_URL=postgresql://postgres:postgres@localhost:5432/ccobservatory_test
          supabase db push --db-url $SUPABASE_DB_URL

      - name: Run backend tests with coverage
        run: |
          cd backend
          pytest tests/ -v \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=85 \
            --junitxml=pytest-report.xml
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ccobservatory_test
          SUPABASE_URL: http://localhost:54321
          SUPABASE_ANON_KEY: test_key
          ENVIRONMENT: test

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results-py${{ matrix.python-version }}
          path: |
            backend/pytest-report.xml
            backend/coverage.xml

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint-and-typecheck

    # Test matrix for multiple Node versions
    strategy:
      matrix:
        node-version: ['18', '20']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend unit tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results-node${{ matrix.node-version }}
          path: |
            frontend/coverage/
            frontend/test-results.xml

  # Integration tests with full stack
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test-backend, test-frontend]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ccobservatory_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend && pip install -r requirements-dev.txt
          cd frontend && npm ci

      - name: Set up Supabase
        run: |
          npm install -g @supabase/cli
          cd supabase
          supabase start

      - name: Run database migrations
        run: |
          cd supabase
          supabase db push

      - name: Start backend server
        run: |
          cd backend
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10  # Wait for server to start
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ccobservatory_integration
          SUPABASE_URL: http://localhost:54321
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY || 'test_key' }}

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Run integration tests
        run: |
          cd backend
          pytest tests/test_*integration* -v --junitxml=integration-report.xml

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: backend/integration-report.xml

  # End-to-end tests with Playwright
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: test-integration
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ccobservatory_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend && pip install -r requirements-dev.txt
          cd frontend && npm ci

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Set up Supabase
        run: |
          npm install -g @supabase/cli
          cd supabase
          supabase start

      - name: Run database migrations
        run: |
          cd supabase
          supabase db push

      - name: Start backend server
        run: |
          cd backend
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ccobservatory_e2e
          SUPABASE_URL: http://localhost:54321
          SUPABASE_ANON_KEY: test_key

      - name: Build and start frontend
        run: |
          cd frontend
          npm run build
          npm run preview &
          sleep 5

      - name: Run E2E tests
        run: |
          cd frontend
          npx playwright test
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:4173

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Python dependencies
        run: |
          cd backend
          pip install safety bandit

      - name: Python security audit
        run: |
          cd backend
          safety check --json --output safety-report.json || true
          bandit -r app -f json -o bandit-report.json || true

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Node.js security audit
        run: |
          cd frontend
          npm audit --audit-level high --json > npm-audit.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            backend/safety-report.json
            backend/bandit-report.json
            frontend/npm-audit.json

  # Build artifacts
  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend && pip install -r requirements-dev.txt
          cd frontend && npm ci

      - name: Build backend
        run: |
          cd backend
          python -m build

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            backend/dist/
            frontend/build/

  # Docker build and push
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/cco-backend
            ${{ secrets.DOCKER_USERNAME }}/cco-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/cco-backend:${{ github.sha }},${{ secrets.DOCKER_USERNAME }}/cco-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/cco-frontend:${{ github.sha }},${{ secrets.DOCKER_USERNAME }}/cco-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Performance benchmarks
  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test-integration
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements-dev.txt

      - name: Run performance benchmarks
        run: |
          cd backend
          pytest tests/test_performance_benchmarks.py -v --benchmark-json=benchmark.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: performance-benchmarks
          path: backend/benchmark.json

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          tool: 'pytest'
          output-file-path: backend/benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test-e2e, security-audit, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production..."
          echo "Docker images built and pushed:"
          echo "  - cco-backend:${{ github.sha }}"
          echo "  - cco-frontend:${{ github.sha }}"
          echo "Ready for deployment to production environment"
          # Add actual deployment scripts here

      - name: Notify deployment
        run: |
          echo "✅ Deployment completed successfully"
          echo "Production URLs:"
          echo "  - Frontend: https://cco.example.com"
          echo "  - API: https://api.cco.example.com"